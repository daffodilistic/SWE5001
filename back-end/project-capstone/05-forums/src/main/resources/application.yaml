
server:
  port: 8080
  host: 0.0.0.0

db:
  source: jdbc
  connection:
    #
    # MySQL configuration
    #
    # docker run --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \
    #   -e MYSQL_DATABASE=pokemon -e MYSQL_USER=user -e MYSQL_PASSWORD=password  mysql:5.7
    # url: jdbc:mysql://127.0.0.1:3306/pokemon?useSSL=false
    # username: user
    # password: password
    # poolName: mysql
    # url: "jdbc:mysql://10.32.176.3:3306/test?useSSL=false"
    # username: "ordermatching"
    # password: "Team3$"
    # poolName: mysql
    url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
    username: sa
    password:
    poolName: h2
    initializationFailTimeout: -1
    connectionTimeout: 2000
    helidon:
      pool-metrics:
        enabled: true
        # name prefix defaults to "db.pool." - if you have more than one client within a JVM, you may want to distinguish between them
        name-prefix: "hikari."
  services:
    metrics:
      - type: METER
  health-check:
    type: "dml"
    statementName: "ping"
  statements:
    # Ping statement
    ping: "SET @HELIDON_PING=0"
    # Create database schema
    create-types: "CREATE TABLE POKEMONTYPE (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL)"
    create-pokemons: "CREATE TABLE POKEMON (id INTEGER NOT NULL PRIMARY KEY, name VARCHAR(64) NOT NULL, id_type INTEGER NOT NULL REFERENCES POKEMONTYPE(id))"
    # Select all types
    select-all-types: "SELECT id, name FROM POKEMONTYPE"
    # Select all pokemons
    select-all-pokemons: "SELECT id, name, id_type FROM POKEMON"
    # Select pokemon by id
    select-pokemon-by-id: "SELECT id, name, id_type FROM POKEMON WHERE id = :id"
    # Select pokemon by name
    select-pokemon-by-name: "SELECT id, name, id_type FROM POKEMON WHERE name = ?"
    # Insert records into database
    insert-type: "INSERT INTO POKEMONTYPE(id, name) VALUES(?, ?)"
    insert-pokemon: "INSERT INTO POKEMON(id, name, id_type) VALUES(?, ?, ?)"
    # Delete pokemon by id
    delete-pokemon-by-id: "DELETE FROM POKEMON WHERE id = :id"
    # Forums statements
    select-all-posts: "SELECT posts.id, posts.ticker, users.name AS 'username', posts.post, posts.date_created FROM forums_posts posts LEFT JOIN user_account_tab users ON user_id = users.id"